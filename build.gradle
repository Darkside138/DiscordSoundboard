apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'distribution'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

version = '2.2.6-beta'

//noinspection GroovyUnusedAssignment
sourceCompatibility = 1.8
//noinspection GroovyUnusedAssignment
targetCompatibility = 1.8

buildscript {
    ext {
        springBootVersion = '2.0.3.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
        classpath("org.springframework.boot:spring-boot-starter-jersey:${springBootVersion}")
    }
}

repositories {
    repositories {
        jcenter()
        mavenCentral()
    }
}

dependencies {
    //https://bintray.com/dv8fromtheworld/maven/JDA
    compile 'net.dv8tion:JDA:3.7.1_386'
    compile 'com.sedmelluq:lavaplayer:1.3.19'
    compile 'commons-io:commons-io:2.4'

    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-jersey'
    
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'com.h2database:h2'
    compile 'org.postgresql:postgresql'

    compile "io.springfox:springfox-swagger2:2.4.0"
    compile 'io.springfox:springfox-swagger-ui:2.4.0'

    compile 'org.json:json:20170516'

    compile 'javax.xml.bind:jaxb-api:2.2.8'

    compile 'com.google.guava:guava:24.1-jre'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
}

processResources {
    exclude 'appplication.properties'
}

build.dependsOn 'clean'
build.mustRunAfter 'clean'

jar {
    group = 'build'
    manifest {
        attributes 'Main-Class': 'net.dirtydeeds.discordsoundboard.MainController',
        'Implementation-Version': version
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    jar.into('static') {
        from('src/main/webapp')
    }
    exclude('/src/main/java/**')
    exclude("/src/main/resources/*")
}

def distributionsCopySpec = copySpec {
    def baseName = "${jar.baseName}"
    def fileName = "${baseName}-$version"
    from file("$buildDir/libs")
    from file("$buildDir/resources/main")
    include "**/application.properties.example"
    from file("/distFiles")
    include "soundboard.bat"
    include "soundboard.sh"
    include "avatar.jpg"
    include "${fileName}.jar"
    include "application.properties.example"
    exclude 'application.properties'
    rename ("application.properties.example", "application.properties")
    rename "${fileName}.jar", "${baseName}.jar"
}

task zip(type: Zip, dependsOn: 'bootRepackage') {
    def fileName = "${baseName}-$version"
    with distributionsCopySpec
    archiveName "${fileName}.zip"
}
task tar(type: Tar, dependsOn: 'bootRepackage') {
    def fileName = "${baseName}-$version"
    with distributionsCopySpec
    archiveName "${fileName}.tar"
}

build.dependsOn(zip,tar)

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

